// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type ConstraintType string

const (
	ConstraintTypeMust ConstraintType = "must"
	ConstraintTypeCant ConstraintType = "cant"
)

func (e *ConstraintType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ConstraintType(s)
	case string:
		*e = ConstraintType(s)
	default:
		return fmt.Errorf("unsupported scan type for ConstraintType: %T", src)
	}
	return nil
}

type NullConstraintType struct {
	ConstraintType ConstraintType
	Valid          bool // Valid is true if ConstraintType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullConstraintType) Scan(value interface{}) error {
	if value == nil {
		ns.ConstraintType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ConstraintType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullConstraintType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ConstraintType), nil
}

type Constraint struct {
	LocationID pgtype.Int4
	TaskID     pgtype.Int4
	WorkerID   pgtype.Int4
	StartSlot  pgtype.Int4
	EndSlot    pgtype.Int4
	Kind       ConstraintType
}

type Location struct {
	ID         int32
	Title      string
	Story      string
	ScheduleID int32
}

type Schedule struct {
	ID    int32
	Title string
}

type Task struct {
	ID         int32
	Title      string
	Story      string
	ScheduleID int32
}

type Worker struct {
	ID         int32
	Title      string
	ScheduleID int32
}
